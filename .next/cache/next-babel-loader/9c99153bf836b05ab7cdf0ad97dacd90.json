{"ast":null,"code":"const cacheName = \"Community Management System\";\nconst staticAssets = [\"./\", \"./_app.js\"];\n\nif (self) {\n  self.addEventListener(\"install\", event => {\n    console.log(\"[ServiceWorker] Install\");\n    self.skipWaiting();\n    event.waitUntil(caches.open(cacheName).then(function (cache) {\n      console.log(\"[ServiceWorker] Caching app shell\");\n      return cache.addAll(staticAssets);\n    }));\n  });\n  self.addEventListener(\"activate\", function (e) {\n    console.log(\"[ServiceWorker] Activate\");\n    e.waitUntil(caches.keys().then(function (keyList) {\n      return Promise.all(keyList.map(function (key) {\n        if (key !== cacheName) {\n          console.log(\"[ServiceWorker] Removing old cache\", key);\n          return caches.delete(key);\n        }\n      }));\n    }));\n    return self.clients.claim();\n  });\n\n  async function cacheFirst(req) {\n    const cacheResponse = await caches.match(req);\n    return cacheResponse || fetch(req);\n  }\n\n  async function networkFirst(req) {\n    const cache = await caches.open(cacheName);\n\n    try {\n      const res = await fetch(req);\n      cache.put(req, res.clone());\n      return res;\n    } catch (error) {\n      return await cache.match(req);\n    }\n  }\n\n  self.addEventListener(\"fetch\", function (event) {\n    event.respondWith(caches.match(event.request).then(function (response) {\n      if (response) {\n        return response;\n      }\n\n      return fetch(event.request);\n    }).catch(function (error) {\n      console.log(error);\n    }).then(function (response) {\n      return caches.open(cacheName).then(function (cache) {\n        if (event.request.url.indexOf(\"test\") < 0) {\n          cache.put(event.request.url, response.clone());\n        }\n\n        return response;\n      });\n    }));\n  });\n}","map":null,"metadata":{},"sourceType":"script"}