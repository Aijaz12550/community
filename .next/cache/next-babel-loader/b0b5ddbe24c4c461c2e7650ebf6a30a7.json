{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/aijaz/nextjs/community-dashboard.git/components/Dashboard/navbar/index.jsx\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*!\n\n=========================================================\n* Paper Dashboard React - v1.1.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/paper-dashboard-react\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n\n* Licensed under MIT (https://github.com/creativetimofficial/paper-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React from \"react\";\nimport Link from \"next/link\";\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Container, InputGroup, InputGroupText, InputGroupAddon, Input } from \"reactstrap\";\nimport { routes } from \"../dashboardRoutes\";\n\nvar Header = /*#__PURE__*/function (_React$Component) {\n  _inherits(Header, _React$Component);\n\n  var _super = _createSuper(Header);\n\n  function Header(props) {\n    var _this;\n\n    _classCallCheck(this, Header);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isOpen: false,\n      dropdownOpen: false,\n      color: \"transparent\"\n    };\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_this));\n    _this.dropdownToggle = _this.dropdownToggle.bind(_assertThisInitialized(_this));\n    _this.sidebarToggle = React.createRef();\n    return _this;\n  }\n\n  _createClass(Header, [{\n    key: \"toggle\",\n    value: function toggle() {\n      if (this.state.isOpen) {\n        this.setState({\n          color: \"transparent\"\n        });\n      } else {\n        this.setState({\n          color: \"dark\"\n        });\n      }\n\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    }\n  }, {\n    key: \"dropdownToggle\",\n    value: function dropdownToggle(e) {\n      this.setState({\n        dropdownOpen: !this.state.dropdownOpen\n      });\n    }\n  }, {\n    key: \"getBrand\",\n    value: function getBrand() {\n      var brandName = \"Default Brand\";\n      routes.map(function (prop, key) {\n        //   if (window.location.href.indexOf(prop.layout + prop.path) !== -1) {\n        //     brandName = prop.name;\n        //   }\n        return null;\n      });\n      return brandName;\n    }\n  }, {\n    key: \"openSidebar\",\n    value: function openSidebar() {\n      document.documentElement.classList.toggle(\"nav-open\");\n      this.sidebarToggle.current.classList.toggle(\"toggled\");\n    } // function that adds color dark/transparent to the navbar on resize (this is for the collapse)\n\n  }, {\n    key: \"updateColor\",\n    value: function updateColor() {\n      if (window.innerWidth < 993 && this.state.isOpen) {\n        this.setState({\n          color: \"dark\"\n        });\n      } else {\n        this.setState({\n          color: \"transparent\"\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener(\"resize\", this.updateColor.bind(this));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(e) {\n      if (window.innerWidth < 993 && e.history.location.pathname !== e.location.pathname && document.documentElement.className.indexOf(\"nav-open\") !== -1) {\n        document.documentElement.classList.toggle(\"nav-open\");\n        this.sidebarToggle.current.classList.toggle(\"toggled\");\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return (// add or remove classes depending if we are on full-screen-maps page or not\n        __jsx(Navbar, {\n          expand: \"lg\",\n          className: 'navbar-absolute fixed-top',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 7\n          }\n        })\n      );\n    }\n  }]);\n\n  return Header;\n}(React.Component);\n\nexport default Header;","map":{"version":3,"sources":["/home/aijaz/nextjs/community-dashboard.git/components/Dashboard/navbar/index.jsx"],"names":["React","Link","Collapse","Navbar","NavbarToggler","NavbarBrand","Nav","NavItem","Dropdown","DropdownToggle","DropdownMenu","DropdownItem","Container","InputGroup","InputGroupText","InputGroupAddon","Input","routes","Header","props","state","isOpen","dropdownOpen","color","toggle","bind","dropdownToggle","sidebarToggle","createRef","setState","e","brandName","map","prop","key","document","documentElement","classList","current","window","innerWidth","addEventListener","updateColor","history","location","pathname","className","indexOf","Component"],"mappings":";;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAQC,IAAR,MAAmB,WAAnB;AACA,SACEC,QADF,EAEEC,MAFF,EAGEC,aAHF,EAIEC,WAJF,EAKEC,GALF,EAMEC,OANF,EAOEC,QAPF,EAQEC,cARF,EASEC,YATF,EAUEC,YAVF,EAWEC,SAXF,EAYEC,UAZF,EAaEC,cAbF,EAcEC,eAdF,EAeEC,KAfF,QAgBO,YAhBP;AAkBA,SAAQC,MAAR,QAAqB,oBAArB;;IAEMC,M;;;;;AACJ,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,KADG;AAEXC,MAAAA,YAAY,EAAE,KAFH;AAGXC,MAAAA,KAAK,EAAE;AAHI,KAAb;AAKA,UAAKC,MAAL,GAAc,MAAKA,MAAL,CAAYC,IAAZ,+BAAd;AACA,UAAKC,cAAL,GAAsB,MAAKA,cAAL,CAAoBD,IAApB,+BAAtB;AACA,UAAKE,aAAL,GAAqB3B,KAAK,CAAC4B,SAAN,EAArB;AATiB;AAUlB;;;;6BACQ;AACP,UAAI,KAAKR,KAAL,CAAWC,MAAf,EAAuB;AACrB,aAAKQ,QAAL,CAAc;AACZN,UAAAA,KAAK,EAAE;AADK,SAAd;AAGD,OAJD,MAIO;AACL,aAAKM,QAAL,CAAc;AACZN,UAAAA,KAAK,EAAE;AADK,SAAd;AAGD;;AACD,WAAKM,QAAL,CAAc;AACZR,QAAAA,MAAM,EAAE,CAAC,KAAKD,KAAL,CAAWC;AADR,OAAd;AAGD;;;mCACcS,C,EAAG;AAChB,WAAKD,QAAL,CAAc;AACZP,QAAAA,YAAY,EAAE,CAAC,KAAKF,KAAL,CAAWE;AADd,OAAd;AAGD;;;+BACU;AACT,UAAIS,SAAS,GAAG,eAAhB;AACAd,MAAAA,MAAM,CAACe,GAAP,CAAW,UAACC,IAAD,EAAOC,GAAP,EAAe;AAC1B;AACA;AACA;AACE,eAAO,IAAP;AACD,OALD;AAMA,aAAOH,SAAP;AACD;;;kCACa;AACZI,MAAAA,QAAQ,CAACC,eAAT,CAAyBC,SAAzB,CAAmCb,MAAnC,CAA0C,UAA1C;AACA,WAAKG,aAAL,CAAmBW,OAAnB,CAA2BD,SAA3B,CAAqCb,MAArC,CAA4C,SAA5C;AACD,K,CACD;;;;kCACc;AACZ,UAAIe,MAAM,CAACC,UAAP,GAAoB,GAApB,IAA2B,KAAKpB,KAAL,CAAWC,MAA1C,EAAkD;AAChD,aAAKQ,QAAL,CAAc;AACZN,UAAAA,KAAK,EAAE;AADK,SAAd;AAGD,OAJD,MAIO;AACL,aAAKM,QAAL,CAAc;AACZN,UAAAA,KAAK,EAAE;AADK,SAAd;AAGD;AACF;;;wCACmB;AAClBgB,MAAAA,MAAM,CAACE,gBAAP,CAAwB,QAAxB,EAAkC,KAAKC,WAAL,CAAiBjB,IAAjB,CAAsB,IAAtB,CAAlC;AACD;;;uCACkBK,C,EAAG;AACpB,UACES,MAAM,CAACC,UAAP,GAAoB,GAApB,IACAV,CAAC,CAACa,OAAF,CAAUC,QAAV,CAAmBC,QAAnB,KAAgCf,CAAC,CAACc,QAAF,CAAWC,QAD3C,IAEAV,QAAQ,CAACC,eAAT,CAAyBU,SAAzB,CAAmCC,OAAnC,CAA2C,UAA3C,MAA2D,CAAC,CAH9D,EAIE;AACAZ,QAAAA,QAAQ,CAACC,eAAT,CAAyBC,SAAzB,CAAmCb,MAAnC,CAA0C,UAA1C;AACA,aAAKG,aAAL,CAAmBW,OAAnB,CAA2BD,SAA3B,CAAqCb,MAArC,CAA4C,SAA5C;AACD;AACF;;;6BACQ;AACP,aACE;AACA,cAAC,MAAD;AACE,UAAA,MAAM,EAAC,IADT;AAEE,UAAA,SAAS,EAAE,2BAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAUD;;;;EAjFkBxB,KAAK,CAACgD,S;;AAoF3B,eAAe9B,MAAf","sourcesContent":["/*!\n\n=========================================================\n* Paper Dashboard React - v1.1.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/paper-dashboard-react\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n\n* Licensed under MIT (https://github.com/creativetimofficial/paper-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React from \"react\";\nimport  Link  from \"next/link\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  Dropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Container,\n  InputGroup,\n  InputGroupText,\n  InputGroupAddon,\n  Input\n} from \"reactstrap\";\n\nimport {routes} from \"../dashboardRoutes\";\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false,\n      dropdownOpen: false,\n      color: \"transparent\"\n    };\n    this.toggle = this.toggle.bind(this);\n    this.dropdownToggle = this.dropdownToggle.bind(this);\n    this.sidebarToggle = React.createRef();\n  }\n  toggle() {\n    if (this.state.isOpen) {\n      this.setState({\n        color: \"transparent\"\n      });\n    } else {\n      this.setState({\n        color: \"dark\"\n      });\n    }\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n  dropdownToggle(e) {\n    this.setState({\n      dropdownOpen: !this.state.dropdownOpen\n    });\n  }\n  getBrand() {\n    let brandName = \"Default Brand\";\n    routes.map((prop, key) => {\n    //   if (window.location.href.indexOf(prop.layout + prop.path) !== -1) {\n    //     brandName = prop.name;\n    //   }\n      return null;\n    });\n    return brandName;\n  }\n  openSidebar() {\n    document.documentElement.classList.toggle(\"nav-open\");\n    this.sidebarToggle.current.classList.toggle(\"toggled\");\n  }\n  // function that adds color dark/transparent to the navbar on resize (this is for the collapse)\n  updateColor() {\n    if (window.innerWidth < 993 && this.state.isOpen) {\n      this.setState({\n        color: \"dark\"\n      });\n    } else {\n      this.setState({\n        color: \"transparent\"\n      });\n    }\n  }\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateColor.bind(this));\n  }\n  componentDidUpdate(e) {\n    if (\n      window.innerWidth < 993 &&\n      e.history.location.pathname !== e.location.pathname &&\n      document.documentElement.className.indexOf(\"nav-open\") !== -1\n    ) {\n      document.documentElement.classList.toggle(\"nav-open\");\n      this.sidebarToggle.current.classList.toggle(\"toggled\");\n    }\n  }\n  render() {\n    return (\n      // add or remove classes depending if we are on full-screen-maps page or not\n      <Navbar\n        expand=\"lg\"\n        className={'navbar-absolute fixed-top'\n        }\n      >\n     \n      </Navbar>\n    );\n  }\n}\n\nexport default Header;\n"]},"metadata":{},"sourceType":"module"}