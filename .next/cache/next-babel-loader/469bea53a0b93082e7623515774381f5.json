{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar cacheName = 'Community Management System';\nvar staticAssets = ['./', './_app.js'];\nself.addEventListener('install', function (event) {\n  console.log('[ServiceWorker] Install');\n  self.skipWaiting();\n  event.waitUntil(caches.open(cacheName).then(function (cache) {\n    console.log('[ServiceWorker] Caching app shell');\n    return cache.addAll(staticAssets);\n  }));\n});\nself.addEventListener('activate', function (e) {\n  console.log('[ServiceWorker] Activate');\n  e.waitUntil(caches.keys().then(function (keyList) {\n    return Promise.all(keyList.map(function (key) {\n      if (key !== cacheName) {\n        console.log('[ServiceWorker] Removing old cache', key);\n        return caches[\"delete\"](key);\n      }\n    }));\n  }));\n  return self.clients.claim();\n});\n\nfunction cacheFirst(req) {\n  var cacheResponse;\n  return _regeneratorRuntime.async(function cacheFirst$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(caches.match(req));\n\n        case 2:\n          cacheResponse = _context.sent;\n          return _context.abrupt(\"return\", cacheResponse || fetch(req));\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction networkFirst(req) {\n  var cache, res;\n  return _regeneratorRuntime.async(function networkFirst$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(caches.open(cacheName));\n\n        case 2:\n          cache = _context2.sent;\n          _context2.prev = 3;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(fetch(req));\n\n        case 6:\n          res = _context2.sent;\n          cache.put(req, res.clone());\n          return _context2.abrupt(\"return\", res);\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](3);\n          _context2.next = 15;\n          return _regeneratorRuntime.awrap(cache.match(req));\n\n        case 15:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 16:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[3, 11]], Promise);\n}\n\nself.addEventListener('fetch', function (event) {\n  event.respondWith(caches.match(event.request).then(function (response) {\n    if (response) {\n      return response;\n    }\n\n    return fetch(event.request);\n  })[\"catch\"](function (error) {\n    console.log(error);\n  }).then(function (response) {\n    return caches.open(cacheName).then(function (cache) {\n      if (event.request.url.indexOf('test') < 0) {\n        cache.put(event.request.url, response.clone());\n      }\n\n      return response;\n    });\n  }));\n});","map":null,"metadata":{},"sourceType":"script"}