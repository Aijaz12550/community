{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*!\n\n=========================================================\n* Paper Dashboard React - v1.1.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/paper-dashboard-react\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n\n* Licensed under MIT (https://github.com/creativetimofficial/paper-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React from \"react\";\nimport Link from \"next/link\";\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Container, InputGroup, InputGroupText, InputGroupAddon, Input } from \"reactstrap\";\nimport { routes } from \"../dashboardRoutes\";\n\nvar Header = /*#__PURE__*/function (_React$Component) {\n  _inherits(Header, _React$Component);\n\n  var _super = _createSuper(Header);\n\n  function Header(props) {\n    var _this;\n\n    _classCallCheck(this, Header);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isOpen: false,\n      dropdownOpen: false,\n      color: \"transparent\"\n    };\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_this));\n    _this.dropdownToggle = _this.dropdownToggle.bind(_assertThisInitialized(_this));\n    _this.sidebarToggle = React.createRef();\n    return _this;\n  }\n\n  _createClass(Header, [{\n    key: \"toggle\",\n    value: function toggle() {\n      if (this.state.isOpen) {\n        this.setState({\n          color: \"transparent\"\n        });\n      } else {\n        this.setState({\n          color: \"dark\"\n        });\n      }\n\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    }\n  }, {\n    key: \"dropdownToggle\",\n    value: function dropdownToggle(e) {\n      this.setState({\n        dropdownOpen: !this.state.dropdownOpen\n      });\n    }\n  }, {\n    key: \"getBrand\",\n    value: function getBrand() {\n      var brandName = \"Default Brand\";\n      routes.map(function (prop, key) {\n        //   if (window.location.href.indexOf(prop.layout + prop.path) !== -1) {\n        //     brandName = prop.name;\n        //   }\n        return null;\n      });\n      return brandName;\n    }\n  }, {\n    key: \"openSidebar\",\n    value: function openSidebar() {\n      document.documentElement.classList.toggle(\"nav-open\");\n      this.sidebarToggle.current.classList.toggle(\"toggled\");\n    } // function that adds color dark/transparent to the navbar on resize (this is for the collapse)\n\n  }, {\n    key: \"updateColor\",\n    value: function updateColor() {\n      if (window.innerWidth < 993 && this.state.isOpen) {\n        this.setState({\n          color: \"dark\"\n        });\n      } else {\n        this.setState({\n          color: \"transparent\"\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener(\"resize\", this.updateColor.bind(this));\n    } //   componentDidUpdate(e) {\n    //     if (\n    //       window.innerWidth < 993 &&\n    //       e.history.location.pathname !== e.location.pathname &&\n    //       document.documentElement.className.indexOf(\"nav-open\") !== -1\n    //     ) {\n    //       document.documentElement.classList.toggle(\"nav-open\");\n    //       this.sidebarToggle.current.classList.toggle(\"toggled\");\n    //     }\n    //   }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return (// add or remove classes depending if we are on full-screen-maps page or not\n        __jsx(Navbar, {\n          expand: \"lg\",\n          className: 'navbar-absolute fixed-top',\n          style: {\n            background: 'white',\n            borderBottom: '2px solid lightgray'\n          }\n        }, __jsx(Container, {\n          fluid: true\n        }, __jsx(\"div\", {\n          className: \"navbar-wrapper\"\n        }, __jsx(\"div\", {\n          className: \"navbar-toggle\"\n        }, __jsx(\"button\", {\n          type: \"button\",\n          ref: this.sidebarToggle,\n          className: \"navbar-toggler\",\n          onClick: function onClick() {\n            return _this2.openSidebar();\n          }\n        }, __jsx(\"span\", {\n          className: \"navbar-toggler-bar bar1\"\n        }), __jsx(\"span\", {\n          className: \"navbar-toggler-bar bar2\"\n        }), __jsx(\"span\", {\n          className: \"navbar-toggler-bar bar3\"\n        }))), __jsx(NavbarBrand, {\n          href: \"/\"\n        }, __jsx(\"p\", {\n          style: {\n            color: 'black'\n          }\n        }, this.props.heading))), __jsx(NavbarToggler, {\n          onClick: this.toggle\n        }, __jsx(\"span\", {\n          className: \"navbar-toggler-bar navbar-kebab\"\n        }), __jsx(\"span\", {\n          className: \"navbar-toggler-bar navbar-kebab\"\n        }), __jsx(\"span\", {\n          className: \"navbar-toggler-bar navbar-kebab\"\n        })), __jsx(Collapse, {\n          isOpen: this.state.isOpen,\n          navbar: true,\n          className: \"justify-content-end\"\n        }, __jsx(\"form\", null, __jsx(InputGroup, {\n          className: \"no-border\"\n        }, __jsx(Input, {\n          placeholder: \"Search...\"\n        }), __jsx(InputGroupAddon, {\n          addonType: \"append\"\n        }, __jsx(InputGroupText, null, __jsx(\"i\", {\n          className: \"fas fa-search\"\n        }))))), __jsx(Nav, {\n          navbar: true\n        }, __jsx(NavItem, null, __jsx(Link, {\n          href: \"/\"\n        }, __jsx(\"div\", {\n          className: \"nav-link btn-magnify\"\n        }, __jsx(\"i\", {\n          className: \"fas fa-list\"\n        }), __jsx(\"p\", null, __jsx(\"span\", {\n          className: \"d-lg-none d-md-block\"\n        }, \"Stats\"))))), __jsx(Dropdown, {\n          nav: true,\n          isOpen: this.state.dropdownOpen,\n          toggle: function toggle(e) {\n            return _this2.dropdownToggle(e);\n          }\n        }, __jsx(DropdownToggle, {\n          caret: true,\n          nav: true\n        }, __jsx(\"i\", {\n          className: \"fas fa-user\"\n        }), __jsx(\"p\", null, __jsx(\"span\", {\n          className: \"d-lg-none d-md-block\",\n          style: {\n            color: 'black'\n          }\n        }, \"Some Actions\"))), __jsx(DropdownMenu, {\n          right: true\n        }, __jsx(DropdownItem, {\n          tag: \"a\"\n        }, \"Action\"), __jsx(DropdownItem, {\n          tag: \"a\"\n        }, \"Another Action\"), __jsx(DropdownItem, {\n          tag: \"a\"\n        }, \"Something else here\"))), __jsx(NavItem, null, __jsx(Link, {\n          href: \"/\"\n        }, __jsx(\"div\", {\n          className: \"nav-link btn-rotate\"\n        }, __jsx(\"i\", {\n          className: \"fas fa-user\"\n        }), __jsx(\"p\", null, __jsx(\"span\", {\n          className: \"d-lg-none d-md-block\"\n        }, \"Account\")))))))))\n      );\n    }\n  }]);\n\n  return Header;\n}(React.Component);\n\nexport default Header;\n/**\n * \n *   <Navbar\n        color={\n          this.props.location.pathname.indexOf(\"full-screen-maps\") !== -1\n            ? \"dark\"\n            : this.state.color\n        }\n        expand=\"lg\"\n        className={\n          this.props.location.pathname.indexOf(\"full-screen-maps\") !== -1\n            ? \"navbar-absolute fixed-top\"\n            : \"navbar-absolute fixed-top \" +\n              (this.state.color === \"transparent\" ? \"navbar-transparent \" : \"\")\n        }\n      >\n        <Container fluid>\n          <div className=\"navbar-wrapper\">\n            <div className=\"navbar-toggle\">\n              <button\n                type=\"button\"\n                ref={this.sidebarToggle}\n                className=\"navbar-toggler\"\n                onClick={() => this.openSidebar()}\n              >\n                <span className=\"navbar-toggler-bar bar1\" />\n                <span className=\"navbar-toggler-bar bar2\" />\n                <span className=\"navbar-toggler-bar bar3\" />\n              </button>\n            </div>\n            <NavbarBrand href=\"/\">{this.getBrand()}</NavbarBrand>\n          </div>\n          <NavbarToggler onClick={this.toggle}>\n            <span className=\"navbar-toggler-bar navbar-kebab\" />\n            <span className=\"navbar-toggler-bar navbar-kebab\" />\n            <span className=\"navbar-toggler-bar navbar-kebab\" />\n          </NavbarToggler>\n          <Collapse\n            isOpen={this.state.isOpen}\n            navbar\n            className=\"justify-content-end\"\n          >\n            <form>\n              <InputGroup className=\"no-border\">\n                <Input placeholder=\"Search...\" />\n                <InputGroupAddon addonType=\"append\">\n                  <InputGroupText>\n                    <i className=\"nc-icon nc-zoom-split\" />\n                  </InputGroupText>\n                </InputGroupAddon>\n              </InputGroup>\n            </form>\n            <Nav navbar>\n              <NavItem>\n                <Link to=\"#pablo\" className=\"nav-link btn-magnify\">\n                  <i className=\"nc-icon nc-layout-11\" />\n                  <p>\n                    <span className=\"d-lg-none d-md-block\">Stats</span>\n                  </p>\n                </Link>\n              </NavItem>\n              <Dropdown\n                nav\n                isOpen={this.state.dropdownOpen}\n                toggle={e => this.dropdownToggle(e)}\n              >\n                <DropdownToggle caret nav>\n                  <i className=\"nc-icon nc-bell-55\" />\n                  <p>\n                    <span className=\"d-lg-none d-md-block\">Some Actions</span>\n                  </p>\n                </DropdownToggle>\n                <DropdownMenu right>\n                  <DropdownItem tag=\"a\">Action</DropdownItem>\n                  <DropdownItem tag=\"a\">Another Action</DropdownItem>\n                  <DropdownItem tag=\"a\">Something else here</DropdownItem>\n                </DropdownMenu>\n              </Dropdown>\n              <NavItem>\n                <Link to=\"#pablo\" className=\"nav-link btn-rotate\">\n                  <i className=\"nc-icon nc-settings-gear-65\" />\n                  <p>\n                    <span className=\"d-lg-none d-md-block\">Account</span>\n                  </p>\n                </Link>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Container>\n      </Navbar>\n */","map":null,"metadata":{},"sourceType":"module"}